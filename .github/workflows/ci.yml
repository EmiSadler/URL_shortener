name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # Install flake8 if not in requirements
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. Line length set to 88 for Black compatibility
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run tests with pytest
        run: |
          pytest -v --tb=short

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=95

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.11' # Only upload once
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check --json

      - name: Run bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort mypy

      - name: Check code formatting with Black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: Type checking with mypy
        run: |
          mypy app/ --ignore-missing-imports

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start application
        run: |
          python main.py &
          sleep 5
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV

      - name: Test API endpoints
        run: |
          # Test health check
          curl -f http://localhost:8000/ || exit 1

          # Test URL shortening
          RESPONSE=$(curl -s -X POST http://localhost:8000/shorten \
            -H "Content-Type: application/json" \
            -d '{"url": "https://example.com"}')
          echo "Shorten response: $RESPONSE"

          # Extract short URL from response
          SHORT_URL=$(echo $RESPONSE | grep -o '"short_url":"[^"]*"' | cut -d'"' -f4)
          SHORT_CODE=$(basename "$SHORT_URL")
          echo "Short code: $SHORT_CODE"

          # Test redirect (should return 302)
          curl -I http://localhost:8000/$SHORT_CODE | grep "302" || exit 1

          # Test decode
          curl -f http://localhost:8000/decode/$SHORT_CODE || exit 1

      - name: Stop application
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, security, quality, integration]
    if: always()

    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.test.result }}" = "success" ] && \
             [ "${{ needs.security.result }}" = "success" ] && \
             [ "${{ needs.quality.result }}" = "success" ] && \
             [ "${{ needs.integration.result }}" = "success" ]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed:"
            echo "  Tests: ${{ needs.test.result }}"
            echo "  Security: ${{ needs.security.result }}"
            echo "  Quality: ${{ needs.quality.result }}"
            echo "  Integration: ${{ needs.integration.result }}"
            exit 1
          fi
